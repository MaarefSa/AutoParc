<?php

namespace App\Controller;

use App\Entity\Vehicule;
use App\Repository\AffectationRepository;
use App\Repository\VehiculeRepository;
use PhpParser\Node\Scalar\String_;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use App\Service\FileUploader;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Routing\Annotation\Route;
use FOS\RestBundle\Controller\Annotations as FOSRest;

/**
 * @Route("/api/vehicule", name="commande")
 */
class VehiculeController extends AbstractController
{
    /**
     * Lists all Vehicules.
     * @FOSRest\Get("/show")
     *
     * @return array
     */
    public function getVehiculeAction()
    {
        $repository = $this->getDoctrine()->getRepository(Vehicule::class);

        // query for a single Product by its primary key (usually "id")
        $vehicule = $repository->findall();
        //  $response = new Response(json_encode($vehicule));
        //  return $response;
        return $this->json($vehicule);
        // return View::create($article, Response::HTTP_OK , []);
    }
    /**
     * get vehicule by id .
     * @FOSRest\Get("/showById/{id}")
     *
     * @return array
     */
    public function getVehiculeByIdAction($id)
    {
        $repository = $this->getDoctrine()->getRepository(Vehicule::class);

        // query for a single Product by its primary key (usually "id")
        $vehicule = $repository->find($id);
        //  $response = new Response(json_encode($vehicule));
        //  return $response;
        return $this->json($vehicule);
        // return View::create($article, Response::HTTP_OK , []);
    }

    /**
     * Create Vehicule.
     * @FOSRest\Post("/create")
     *
     * @return array
     */
    public function postVehiculeAction(Request $request ,FileUploader $fileUploader)
    {
        $vehicule = new Vehicule();
        $vehicule->setImmatricule($request->get('immatricule'));
        $vehicule->setMarque($request->get('marque'));
        $vehicule->setNumchassis($request->get('numchassis'));
        $vehicule->setCartegrise($request->get('cartegrise'));
        $vehicule->setCouleur($request->get('couleur'));
        /*
        $vehicule->setBrochure(
            new File($this->getParameter('brochures_directory').'/'.$request->get('brochure'))
        );

        $file = $vehicule->getBrochure();
        $fileName = $fileUploader->upload($file);

        $vehicule->setBrochure($fileName);
*/
        $em = $this->getDoctrine()->getManager();
        $em->persist($vehicule);
        $em->flush();
        //  return View::create($article, Response::HTTP_CREATED , []);
        //return new Response(['data'=> "okkk"]);
        $response = new Response(json_encode($vehicule));

        return $response;


    }


    /**
     * Edit Vehicule.
     * @FOSRest\Post("/edit/{id}")
     *
     * @return array
     */
    public function editVehiculeAction(Request $request , $id)
    {
        $vehicule = $this->getDoctrine()->getRepository(Vehicule::class)->find($id);


        $vehicule->setImmatricule($request->get('immatricule'));
        $vehicule->setMarque($request->get('marque'));
        $vehicule->setNumchassis($request->get('numchassis'));
        $vehicule->setCartegrise($request->get('cartegrise'));
        $vehicule->setCouleur($request->get('couleur'));
        $em = $this->getDoctrine()->getManager();
        $em->flush();
        //  return View::create($article, Response::HTTP_CREATED , []);
        //return new Response(['data'=> "okkk"]);
        $response = new Response(json_encode($vehicule));

        return $response;

    }

    /**
     * Delete Vehicule.
     * @FOSRest\Delete("/delete/{id}")
     *
     * @return array
     */
    public function deletepostArticleAction(Request $request , $id)
    {
        $vehicule = $this->getDoctrine()->getRepository(Vehicule::class)->find($id);
        $em = $this->getDoctrine()->getManager();
        $em->remove($vehicule);
        $em->flush();

        $response = new Response(json_encode($vehicule));
        $response->send();
        return $response;


    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
